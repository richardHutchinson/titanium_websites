// Generated by CoffeeScript 1.6.3
(function() {
	var MultiReddit, Post, db, remoteError;

	db = Ti.Database.open('posts');

	db.execute('CREATE TABLE IF NOT EXISTS posts (id TEXT PRIMARY KEY, title TEXT, over_18 INTEGER, created_utc INTEGER, subreddit TEXT, url TEXT, thumbnail TEXT)');

	db.close();

	remoteError = function(e) {
		Ti.API.debug("STATUS: " + this.status);
		Ti.API.debug("TEXT:   " + this.responseText);
		Ti.API.debug("ERROR:  " + e.error);
		Ti.API.debug("LOCATION: " + this.location); debugger;
	};

	Post = (function() {
		function Post(id, title, subreddit, over_18, created_utc, url, thumbnail) {
			this.id = id;
			this.title = title;
			this.subreddit = subreddit;
			this.over_18 = over_18;
			this.created_utc = created_utc;
			this.url = url;
			this.thumbnail = thumbnail;
		}


		Post.prototype.save = function() {
			var lastID;
			db = Ti.Database.open('posts');
			db.execute('INSERT INTO posts (id, title, subreddit, over_18, created_utc, url, thumbnail) VALUES (?, ?, ?, ?, ?, ?, ?)', this.id, this.title, this.subreddit, this.over_18, this.created_utc, this.url, this.thumbnail);
			lastID = db.lastInsertRowID;
			return db.close();
		};

		Post.pullFromDB = function(id) {
			var over_18, post, resultset;
			post = null;
			db = Ti.Database.open('posts');
			resultset = db.execute('SELECT * FROM posts WHERE id=? LIMIT 1', id);
			if (resultset.isValidRow()) {
				over_18 = resultset.fieldByName('over_18') === 1 ? true : false;
				post = new Post(resultset.fieldByName('id'), resultset.fieldByName('title'), resultset.fieldByName('subreddit'), over_18, resultset.fieldByName('created_utc'), resultset.fieldByName('url'), resultset.fieldByName('thumbnail'));
			}
			resultset.close();
			db.close();
			return post;
		};

		Post.deleteCachedPosts = function() {
			db = Ti.Database.open('posts');
			db.execute('DELETE FROM posts');
			return db.close();
		};

		Post.cachedPosts = function() {
			var posts, resultset;
			posts = [];
			db = Ti.Database.open('posts');
			resultset = db.execute('SELECT * FROM posts ORDER BY created_utc DESC');
			while (resultset.isValidRow()) {
				posts.push(new Post(resultset.fieldByName('id'), resultset.fieldByName('title'), resultset.fieldByName('subreddit'), resultset.fieldByName('over_18'), resultset.fieldByName('created_utc'), resultset.fieldByName('url'), resultset.fieldByName('thumbnail')));
				resultset.next();
			}
			resultset.close();
			db.close();
			return posts;
		};

		return Post;

	})();

	MultiReddit = (function() {
		function MultiReddit(refreshCallback) {
			this.refreshCallback = refreshCallback != null ? refreshCallback : null;
			this.subreddits = Ti.App.Properties.getList('subreddits', []);
			this.posts = [];
		}


		MultiReddit.prototype.appInit = function() {
			this.posts = Post.cachedPosts();
			Ti.API.debug('loading posts from db: ' + this.posts);
			this.refreshPosts();
			return this.getPosts();
		};

		MultiReddit.prototype.getPosts = function() {
			var parent, posts, xhr;
			posts = [];
			parent = this;
			xhr = Ti.Network.createHTTPClient({
				onload : function() {
					var d, entry, p, parsedResponse, _i, _len, _ref;
					parsedResponse = JSON.parse(this.responseText);
					Post.deleteCachedPosts();
					_ref = parsedResponse.data.children;
					for ( _i = 0, _len = _ref.length; _i < _len; _i++) {
						entry = _ref[_i];
						d = entry.data;
						p = new Post(d.id, d.title, d.subreddit, d.over_18, d.created_utc, d.url, d.thumbnail);
						p.save();
						posts.push(p);
					}
					parent.posts = posts;
					return parent.refreshPosts();
				},
				onerror : remoteError,
				timeout : 5000
			});
			xhr.open('GET', 'http://api.reddit.com/r/' + this.subredditList());
			Ti.API.debug('xhr url: ' + xhr.location);
			return xhr.send();
		};

		MultiReddit.prototype.subredditList = function() {
			return this.subreddits.join('+');
		};

		MultiReddit.prototype.refreshPosts = function() {
			if (this.refreshCallback) {
				return this.refreshCallback();
			}
		};

		return MultiReddit;

	})();

	exports.MultiReddit = MultiReddit;

}).call(this);